Linked list Program:
#include <stdio.h>
#include <stdlib.h>
// Node structure definition
struct Node {
    int data;
    struct Node *next;
};
// Head pointer initialized to NULL
struct Node *head = NULL;
// Function declarations
void insertAtBeginning(int);
void insertAtEnd(int);
void insertBetween(int, int, int);
void display();
void removeBeginning();
void removeEnd();
void removeSpecific(int);
int main() {
    int choice, value, choice1, loc1, loc2;
    while (1) {
        printf("\n\n****** MENU ******\n1. Insert\n2. Display\n3. Delete\n4. Exit\nEnter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter the value to be inserted: ");
                scanf("%d", &value);
                printf("Where do you want to insert?\n1. At Beginning\n2. At End\n3. Between\nEnter your choice: ");
                scanf("%d", &choice1);
                switch (choice1) {
                    case 1:
                        insertAtBeginning(value);
                        break;
                    case 2:
                        insertAtEnd(value);
                        break;
                    case 3:
                        printf("Enter the two values (existing consecutive nodes) where you want to insert between: ");
                        scanf("%d%d", &loc1, &loc2);
                        insertBetween(value, loc1, loc2);
                        break;
                    default:
                        printf("\nWrong Input!! Try again!!!\n\n");
                        break;
                }
                break;
            case 2:
                display();
                break;
            case 3:
                printf("How do you want to delete?\n1. From Beginning\n2. From End\n3. Specific\nEnter your choice: ");
                scanf("%d", &choice1);
                switch (choice1) {
                    case 1:
                        removeBeginning();
                        break;
                    case 2:
                        removeEnd();
                        break;
                    case 3:
                        printf("Enter the value you want to delete: ");
                        scanf("%d", &loc2);
                        removeSpecific(loc2);
                        break;
                    default:
                        printf("\nWrong Input!! Try again!!!\n\n");
                        break;
                }
                break;
            case 4:
                exit(0);
            default:
                printf("\nWrong input!!! Try again!!\n\n");
        }
    }
    return 0;
}
void insertAtBeginning(int value) {
    struct Node *newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = head;
    head = newNode;
    printf("\nOne node inserted at beginning!!!\n");
}
void insertAtEnd(int value) {
    struct Node *newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;
    if (head == NULL) {
        head = newNode;
    } else {
        struct Node *temp = head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = newNode;
    }
    printf("\nOne node inserted at end!!!\n");
}

void insertBetween(int value, int loc1, int loc2) {
    if (head == NULL || head->next == NULL) {
        printf("\nInsertion not possible, list has insufficient nodes.\n");
        return;
    }
    struct Node *temp = head;
    while (temp->next != NULL && !(temp->data == loc1 && temp->next->data == loc2)) {
        temp = temp->next;
    }
    if (temp->next == NULL) {
        printf("\nSpecified positions not found consecutively!\n");
        return;
    }
    struct Node *newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = temp->next;
    temp->next = newNode;
    printf("\nOne node inserted between %d and %d!!!\n", loc1, loc2);
}
void removeBeginning() {
    if (head == NULL) {
        printf("\nList is Empty!!!\n");
    } else {
        struct Node *temp = head;
        head = head->next;
        free(temp);
        printf("\nOne node deleted from beginning!!!\n");
    }
}
void removeEnd() {
    if (head == NULL) {
        printf("\nList is Empty!!!\n");
        return;
    }

    if (head->next == NULL) {
        free(head);
        head = NULL;
    } else {
        struct Node *temp1 = head;
        struct Node *temp2 = NULL;
        while (temp1->next != NULL) {
            temp2 = temp1;
            temp1 = temp1->next;
        }
        temp2->next = NULL;
        free(temp1);
    }
    printf("\nOne node deleted from end!!!\n");
}
void removeSpecific(int delValue) {
    if (head == NULL) {
        printf("\nList is Empty!!!\n");
        return;
    }
    struct Node *temp1 = head, *temp2 = NULL;
    if (head->data == delValue) {
        head = head->next;
        free(temp1);
        printf("\nOne node deleted!!!\n");
        return;
    }
    while (temp1 != NULL && temp1->data != delValue) {
        temp2 = temp1;
        temp1 = temp1->next;
    }
    if (temp1 == NULL) {
        printf("\nGiven node not found in the list!!!\n");
        return;
    }
    temp2->next = temp1->next;
    free(temp1);
    printf("\nOne node deleted!!!\n");
}
void display() {
    if (head == NULL) {
        printf("\nList is Empty\n");
    } else {
        struct Node *temp = head;
        printf("\n\nList elements are: ");
        while (temp != NULL) {
            printf("%d ---> ", temp->data);
            temp = temp->next;
        }
        printf("NULL\n");
    }
}
Circular Linked list
#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
};
// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
// Function to insert at beginning
void insertAtBeginning(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    
    if (*head == NULL) {
        newNode->next = newNode;
        *head = newNode;
        return;
    }
    
    struct Node* last = *head;
    while (last->next != *head) {
        last = last->next;
    }
    
    newNode->next = *head;
    last->next = newNode;
    *head = newNode;
}
// Function to display the list
void displayList(struct Node* head) {
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }
    struct Node* temp = head;
    do {
        printf("%d -> ", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf("(head)\n");
}
int main() {
    struct Node* head = NULL;
    
    insertAtBeginning(&head, 30);
    insertAtBeginning(&head, 20);
    insertAtBeginning(&head, 10);
    printf("Circular Linked List: ");
    displayList(head);
    return 0;
}
STACK Program:
#include <stdio.h>
#include <stdlib.h>  // For exit()
#define SIZE 10
int stack[SIZE], top = -1;
void push(int value) {
    if(top == SIZE-1) {
        printf("\nStack Overflow! Insertion failed for %d", value);
    } else {
        stack[++top] = value;
        printf("\nInserted %d successfully", value);
    }
}
void pop() {
    if(top == -1) {
        printf("\nStack Underflow! Stack is empty");
    } else {
        printf("\nPopped value: %d", stack[top--]);
    }
}
void peek() {
    if(top == -1) {
        printf("\nStack is empty");
    } else {
        printf("\nTop element: %d", stack[top]);
    }
}
void display() {
    if(top == -1) {
        printf("\nStack is empty");
    } else {
        printf("\nStack contents (Top to Bottom):\n");
        for(int i = top; i >= 0; i--) {
            printf("%d\n", stack[i]);
        }
        printf("Total elements: %d", top+1);
    }
}
int main() {
    int value, choice;
    while(1) {
        printf("\n\n***** STACK MENU *****");
        printf("\n1. Push\n2. Pop\n3. Peek\n4. Display\n5. Exit");
        printf("\nEnter your choice (1-5): ");
        scanf("%d", &choice);
        switch(choice) {
            case 1: 
                printf("Enter value to push: ");
                scanf("%d", &value);
                push(value);
                break;
            case 2: 
                pop();
                break;
            case 3: 
                peek();
                break;
            case 4: 
                display();
                break;
            case 5: 
                exit(0);
            default: 
                printf("\nInvalid choice! Please try again.");
        }
    }
    return 0;
}
